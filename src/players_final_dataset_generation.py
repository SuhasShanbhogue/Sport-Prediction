# -*- coding: utf-8 -*-
"""players_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H_Qvg4ZTAzs_Y0Hj1DgLLGNUtncvj5V2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# from sklearn.linear_model import LogisticRegression
# from sklearn.preprocessing import StandardScaler
# from sklearn.neural_network import MLPClassifier
# from sklearn.metrics import confusion_matrix
# from sklearn.metrics import roc_auc_score
# from sklearn.ensemble import GradientBoostingClassifier
# from sklearn.tree import DecisionTreeClassifier
# from sklearn.decomposition import PCA

data_folder = "Data1"
def main():
  direc = "NCAA_bal"
  df_players_2011 = pd.read_csv(f"../{data_folder}/playersBal_2011.csv")
  df_players_2012 = pd.read_csv(f"../{data_folder}/playersBal_2012.csv")
  df_players_2013 = pd.read_csv(f"../{data_folder}/playersBal_2013.csv")
  df_players_2014 = pd.read_csv(f"../{data_folder}/playersBal_2014.csv")
  df_players_2015 = pd.read_csv(f"../{data_folder}/playersBal_2015.csv")

  def onlyGetCols(df):
      ctr = 0
      cols =  []
      for i in df.columns:
          if(i[0:8] in ["AttackPC", "AssistPC", "Block_Ef", "Ace_Stre", "ServePCT"] ):
              cols.append(i)
      cols.append("Winner")
      return df[cols]
      
  def processDataframe(df):
      cols = ["AttackPCT", "AssistPCT", "ServePCT", "Block_Efficiency_Player", "Ace_Strength", "AttackPCT.1",
      "AssistPCT.1", "ServePCT.1", "Block_Efficiency_Player.1", "Ace_Strength.1", "AttackPCT.2", "AssistPCT.2",
      "ServePCT.2", "Block_Efficiency_Player.2", "Ace_Strength.2", "AttackPCT.3",
      "AssistPCT.3", "ServePCT.3", "Block_Efficiency_Player.3", "Ace_Strength.3", "AttackPCT.4", "AssistPCT.4", "ServePCT.4", "Block_Efficiency_Player.4",
      "Ace_Strength.4", "AttackPCT.5", "AssistPCT.5", "ServePCT.5",  "Block_Efficiency_Player.5", "Ace_Strength.5", "Winner"]
      newdf = pd.DataFrame(data = None, columns = cols)
      #We are going to insert into the new dataframe
      df = onlyGetCols(df)
      for i in df.index:
          currRow = []
          #Team1
          ctr = 0
          playerscoredict = dict()
          for j in range(0, 50, 5):
              # cols = [0+j, 1+j, 2+j, 3+j, 4+j]
              playerscoredict[ctr] = (df.iloc[i, 0+j : 5+j]).mean()
              ctr+=1
          ctr = 0
          w = sorted(playerscoredict, key=playerscoredict.get, reverse=True)
          for j in range(0, 6, 3):
            p1 = w[j]
            p2 = w[j+1]
            p3 = w[j+2]
            # print(f"For {p1, p2, p3}")
            p1Features = df.iloc[i, 0 + p1*5 : 5 + p1*5]
            p2Features = df.iloc[i, 0 + p2*5 : 5 + p2*5]
            p3Features = df.iloc[i, 0 + p3*5 : 5 + p3*5]
            p1Features = p1Features.add(list(p2Features))
            p1Features = p1Features.add(list(p3Features))
            for k in range(len(p1Features)):
                p1Features[k] = p1Features[k]/3
            currRow.extend(list(p1Features))
          p1 = w[6]
          p2 = w[7]
          p3 = w[8]
          p4 = w[9]
          p1Features = df.iloc[i, 0 + p1*5 : 5 + p1*5]
          p2Features = df.iloc[i, 0 + p2*5 : 5 + p2*5]
          p3Features = df.iloc[i, 0 + p3*5 : 5 + p3*5]
          p4Features = df.iloc[i, 0 + p4*5 : 5 + p4*5]
          p1Features = p1Features.add(list(p2Features))
          p1Features = p1Features.add(list(p3Features))
          p1Features = p1Features.add(list(p4Features))
          for k in range(len(p1Features)):
              p1Features[k] = p1Features[k]/4
          currRow.extend(list(p1Features))
          #Team2
          ctr = 0
          playerscoredict = dict()
          for j in range(50, 100, 5):
              playerscoredict[10 + ctr] = (df.iloc[i, 0+j : 5+j]).mean()
              ctr+=1
          ctr = 0
          w = sorted(playerscoredict, key=playerscoredict.get, reverse=True)
          for j in range(0, 6, 3):
            p1 = w[j]
            p2 = w[j+1]
            p3 = w[j+2]
            # print(f"For {p1, p2, p3}")
            p1Features = df.iloc[i, 0 + p1*5 : 5 + p1*5]
            p2Features = df.iloc[i, 0 + p2*5 : 5 + p2*5]
            p3Features = df.iloc[i, 0 + p3*5 : 5 + p3*5]
            p1Features = p1Features.add(list(p2Features))
            p1Features = p1Features.add(list(p3Features))
            for k in range(len(p1Features)):
                p1Features[k] = p1Features[k]/3
            currRow.extend(list(p1Features))
          p1 = w[6]
          p2 = w[7]
          p3 = w[8]
          p4 = w[9]
          p1Features = df.iloc[i, 0 + p1*5 : 5 + p1*5]
          p2Features = df.iloc[i, 0 + p2*5 : 5 + p2*5]
          p3Features = df.iloc[i, 0 + p3*5 : 5 + p3*5]
          p4Features = df.iloc[i, 0 + p4*5 : 5 + p4*5]
          p1Features = p1Features.add(list(p2Features))
          p1Features = p1Features.add(list(p3Features))
          p1Features = p1Features.add(list(p4Features))
          for k in range(len(p1Features)):
              p1Features[k] = p1Features[k]/4
          currRow.extend(list(p1Features))
          currRow.append(df.iloc[i, -1])
          length = len(newdf)
          newdf.loc[length] = currRow
      return newdf

  p_2011 = processDataframe(df_players_2011)
  p_2012 = processDataframe(df_players_2012)
  p_2013 = processDataframe(df_players_2013)
  p_2014 = processDataframe(df_players_2014)
  p_2015 = processDataframe(df_players_2015)
  p_2011.to_csv(f"../{data_folder}/Players_final_2011.csv", index=False)
  p_2012.to_csv(f"../{data_folder}/Players_final_2012.csv", index=False)
  p_2013.to_csv(f"../{data_folder}/Players_final_2013.csv", index=False)
  p_2014.to_csv(f"../{data_folder}/Players_final_2014.csv", index=False)
  p_2015.to_csv(f"../{data_folder}/Players_final_2015.csv", index=False)

if __name__ == "__main__":
  main()